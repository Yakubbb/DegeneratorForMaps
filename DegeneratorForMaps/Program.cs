using DegeneratorForMaps.Structures;
using System.Text;

namespace DegeneratorForMaps
{
    internal class Program
    {
        static void Main(string[] args)
        {
            char[,] textMap =
               {{ '1','1','1','3','1','1','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','▒','▒','░','▒','▒','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','▒','▒','░','▒','▒','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','▒','▒','░','▒','▒','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','▒','2','2','2','▒','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','▒','2','2','2','▒','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '~','▒','2','2','2','▒','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','~','~','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','~','D','~','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','~','D','~','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','░','▒','▓','█','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','░','▒','▓','█','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','░','▒','▓','█','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','░','▒','▓','█','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','░','▒','▓','█','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','░','▒','▓','█','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','2','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '~','~','~','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','2','~','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','2','1','~','1','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','2','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','1','2','1','1','1','1','1','1','1' },
                {  '1','3','2','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','3','2','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','3','2','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','3','2','1','2','1','1','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','1','2','2','2','1','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','1','2','2','2','1','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','1','2','2','2','1','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' },
                {  '1','1','1','3','1','1','▒','3','2','1','2','1','1','1','1','2','2','2','1','▒','2','1','1','1','1','1','1','1' }};





            for (int i = 0; i < 5; i++)
            {
                AbstractStructure testMountains = new Mountains(100, 100, 0, 0, 1000);
                Map.DebugDrawMap(testMountains.StructureChars);
                Console.WriteLine();
                Console.WriteLine();
            }

            // Map aboba = Map.CreateMapWithRandomChunks(100, 100);
            //Map aboba = new Map(100, 100);
            //aboba.DebugShowChunks();
            //Map.DebugDrawMap(aboba);
        }
    }
}
